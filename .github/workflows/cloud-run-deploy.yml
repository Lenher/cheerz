name: 'Deploy to Cloud Run'

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'gs-spring-boot-docker/complete/**'
      - '.github/workflows/cloud-run-deploy.yml'

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  REPOSITORY: ${{ vars.GCP_REPOSITORY }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  SERVICE_NAME: spring-boot-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gs-spring-boot-docker/complete/gradlew

    - name: Build application
      run: |
        cd gs-spring-boot-docker/complete
        ./gradlew build --no-daemon

    - name: Run tests
      run: |
        cd gs-spring-boot-docker/complete
        ./gradlew test --no-daemon

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build Docker image with Gradle buildpack
      run: |
        cd gs-spring-boot-docker/complete
        export JAVA_HOME=$JAVA_HOME_17_X64
        ./gradlew bootBuildImage \
          --imageName=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Tag and push Docker image
      run: |
        # Tag as latest
        docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                   ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
        
        # Push both tags
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --region=${{ env.REGION }} \
          --port=8080 \
          --allow-unauthenticated \
          --min-instances=1 \
          --max-instances=10 \
          --memory=1Gi \
          --cpu=1 \
          --set-env-vars="SERVER_PORT=8080" \
          --quiet

    - name: Allow public access to Cloud Run service
      run: |
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member="allUsers" \
          --role="roles/run.invoker"

    - name: Test service accessibility
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        echo "Testing service at: $SERVICE_URL"
        
        # Wait a bit for the service to be ready
        sleep 10
        
        # Test the service
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL || echo "000")
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Service is accessible and responding correctly!"
          RESPONSE=$(curl -s $SERVICE_URL)
          echo "Response: $RESPONSE"
          ACCESS_STATUS="✅ **Accessible**"
        else
          echo "❌ Service returned HTTP $HTTP_CODE"
          ACCESS_STATUS="❌ **Not accessible** (HTTP $HTTP_CODE)"
        fi
        
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "ACCESS_STATUS=$ACCESS_STATUS" >> $GITHUB_ENV

    - name: Deployment summary
      run: |
        echo "### 🚀 Application Deployed to Cloud Run!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Service URL:** ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ env.ACCESS_STATUS }}" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Image:** \`${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test the deployment:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "curl ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY